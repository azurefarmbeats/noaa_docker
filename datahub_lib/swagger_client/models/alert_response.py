# coding: utf-8

"""
    Azure FarmBeats API

    <p>  <p>Azure FarmBeats helps you build digital agricultural solutions in Azure. By providing a standardized schema to query agricultural data from various sources, Azure FarmBeats provides you:  <ul >   <li style=\"margin: 7px;\">Ability to acquire, aggregate, process and store agricultural data.</li>   <li style=\"margin: 7px;\">Capability to fuse data between data sources and generate insights.</li>   <li style=\"margin: 7px;\">Schematized access and query capabilities on ingested data.</li>  </ul>  </p>  <h><b>REST Operation Groups</b></h>  <p><b>Farm:</b></p>  <p>Farm corresponds to a physical location of interest within the system. Each Farm has a Farm name and a unique farm id.</p>  <p><b>Device:</b></p>  <p>Device corresponds to a physical device present in the farm. Each device has a unique device id. Device is typically provisioned to a farm with a farm id.</p>  <p><b>DeviceModel:</b></p>  <p>DeviceModel corresponds to the meta-data of the device such as the Manufacturer, Type of the device either Gateway or Node.</p>  <p><b>Sensor:</b></p>  <p>Sensor corresponds to a physical sensor that records values. A sensor is typically connected to a device with a device id.</p>  </p>  <p><b>SensorModel:</b></p>  <p>SensorModel corresponds to the meta-data of the sensor such as the Manufacturer, Type of the sensor either Analog or Digital, Sensor Measure such as Ambient Temperature, Pressure etc.</p>  <p><b>Telemetry:</b></p>  <p>Telemetry provides the ability to read telemetry messages for a particular sensor & time range.</p>  <p><b>Job:</b></p>  <p>Job corresponds to any workflow of activities which are executed in the system to get a desired output. Each job is associated with a job id and job type.</p>  <p><b>JobType:</b></p>  <p>JobType corresponds to different job types supported by the system. This includes system defined & user-defined job types.</p>  <p><b>ExtendedType:</b></p>  <p>ExtendedType corresponds to the list of system & user-defined types in the system. This helps setup a new Sensor or Scene or Scenefile type in the system.</p>  <p><b>Partner:</b></p>  <p>Partner corresponds to the sensor/weather/imagery integration partner.</p>  <p><b>Scene:</b></p>  <p>Scene corresponds to any generated output in the context of a Farm. Each Scene has a scene id, scene source, scene type and farm id associated with it. Each scene id  can have multiple scene files associated with it.</p>  <p><b>SceneFile:</b></p>  <p>SceneFile corresponds to all files which are generated for single scene. A single scene id can have multiple SceneFile ids associated with it.</p>  <p><b>Rule:</b></p>  <p>Rule corresponds to a condition for farm-related data to trigger an alert. Each rule will be in the context of a farm's data.</p>  <p><b>Alert:</b></p>  <p>Alert corresponds to a notification which gets generated when a rule condition is met. Each alert will be in the context of a rule.</p>  <p><b>RoleDefinition:</b></p>  <p>RoleDefinition defines allowed and disallowed actions for a role.</p>  <p><b>RoleAssignment:</b></p>  <p>RoleAssignment corresponds to the assignment of a role to a user or a service principal.</p>  </p>    # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AlertResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'created_at': 'datetime',
        'last_modified_at': 'datetime',
        'rule_description': 'str',
        'rule_severity': 'str',
        'rule_id': 'str',
        'rule_actions': 'list[IAction]',
        'device_id': 'str',
        'device_msg_received': 'datetime',
        'status': 'str'
    }

    attribute_map = {
        'id': 'id',
        'created_at': 'createdAt',
        'last_modified_at': 'lastModifiedAt',
        'rule_description': 'ruleDescription',
        'rule_severity': 'ruleSeverity',
        'rule_id': 'ruleId',
        'rule_actions': 'ruleActions',
        'device_id': 'deviceId',
        'device_msg_received': 'deviceMsgReceived',
        'status': 'status'
    }

    def __init__(self, id=None, created_at=None, last_modified_at=None, rule_description=None, rule_severity=None, rule_id=None, rule_actions=None, device_id=None, device_msg_received=None, status=None):  # noqa: E501
        """AlertResponse - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._created_at = None
        self._last_modified_at = None
        self._rule_description = None
        self._rule_severity = None
        self._rule_id = None
        self._rule_actions = None
        self._device_id = None
        self._device_msg_received = None
        self._status = None
        self.discriminator = None

        self.id = id
        if created_at is not None:
            self.created_at = created_at
        if last_modified_at is not None:
            self.last_modified_at = last_modified_at
        if rule_description is not None:
            self.rule_description = rule_description
        if rule_severity is not None:
            self.rule_severity = rule_severity
        self.rule_id = rule_id
        if rule_actions is not None:
            self.rule_actions = rule_actions
        self.device_id = device_id
        if device_msg_received is not None:
            self.device_msg_received = device_msg_received
        self.status = status

    @property
    def id(self):
        """Gets the id of this AlertResponse.  # noqa: E501

        Gets or sets unique id auto generated for the alert.  # noqa: E501

        :return: The id of this AlertResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AlertResponse.

        Gets or sets unique id auto generated for the alert.  # noqa: E501

        :param id: The id of this AlertResponse.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def created_at(self):
        """Gets the created_at of this AlertResponse.  # noqa: E501

        Gets or sets alert creation date.  # noqa: E501

        :return: The created_at of this AlertResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this AlertResponse.

        Gets or sets alert creation date.  # noqa: E501

        :param created_at: The created_at of this AlertResponse.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def last_modified_at(self):
        """Gets the last_modified_at of this AlertResponse.  # noqa: E501

        Gets or sets alert last updated date.  # noqa: E501

        :return: The last_modified_at of this AlertResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._last_modified_at

    @last_modified_at.setter
    def last_modified_at(self, last_modified_at):
        """Sets the last_modified_at of this AlertResponse.

        Gets or sets alert last updated date.  # noqa: E501

        :param last_modified_at: The last_modified_at of this AlertResponse.  # noqa: E501
        :type: datetime
        """

        self._last_modified_at = last_modified_at

    @property
    def rule_description(self):
        """Gets the rule_description of this AlertResponse.  # noqa: E501

        Gets or sets rule description.  # noqa: E501

        :return: The rule_description of this AlertResponse.  # noqa: E501
        :rtype: str
        """
        return self._rule_description

    @rule_description.setter
    def rule_description(self, rule_description):
        """Sets the rule_description of this AlertResponse.

        Gets or sets rule description.  # noqa: E501

        :param rule_description: The rule_description of this AlertResponse.  # noqa: E501
        :type: str
        """

        self._rule_description = rule_description

    @property
    def rule_severity(self):
        """Gets the rule_severity of this AlertResponse.  # noqa: E501

        Gets or sets rule severity.  # noqa: E501

        :return: The rule_severity of this AlertResponse.  # noqa: E501
        :rtype: str
        """
        return self._rule_severity

    @rule_severity.setter
    def rule_severity(self, rule_severity):
        """Sets the rule_severity of this AlertResponse.

        Gets or sets rule severity.  # noqa: E501

        :param rule_severity: The rule_severity of this AlertResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["Info", "Warning", "Critical"]  # noqa: E501
        if rule_severity not in allowed_values:
            raise ValueError(
                "Invalid value for `rule_severity` ({0}), must be one of {1}"  # noqa: E501
                .format(rule_severity, allowed_values)
            )

        self._rule_severity = rule_severity

    @property
    def rule_id(self):
        """Gets the rule_id of this AlertResponse.  # noqa: E501

        Gets or sets rule id.  # noqa: E501

        :return: The rule_id of this AlertResponse.  # noqa: E501
        :rtype: str
        """
        return self._rule_id

    @rule_id.setter
    def rule_id(self, rule_id):
        """Sets the rule_id of this AlertResponse.

        Gets or sets rule id.  # noqa: E501

        :param rule_id: The rule_id of this AlertResponse.  # noqa: E501
        :type: str
        """
        if rule_id is None:
            raise ValueError("Invalid value for `rule_id`, must not be `None`")  # noqa: E501

        self._rule_id = rule_id

    @property
    def rule_actions(self):
        """Gets the rule_actions of this AlertResponse.  # noqa: E501

        Gets or sets rule actions.  # noqa: E501

        :return: The rule_actions of this AlertResponse.  # noqa: E501
        :rtype: list[IAction]
        """
        return self._rule_actions

    @rule_actions.setter
    def rule_actions(self, rule_actions):
        """Sets the rule_actions of this AlertResponse.

        Gets or sets rule actions.  # noqa: E501

        :param rule_actions: The rule_actions of this AlertResponse.  # noqa: E501
        :type: list[IAction]
        """

        self._rule_actions = rule_actions

    @property
    def device_id(self):
        """Gets the device_id of this AlertResponse.  # noqa: E501

        Gets or sets device id in a rule.  # noqa: E501

        :return: The device_id of this AlertResponse.  # noqa: E501
        :rtype: str
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this AlertResponse.

        Gets or sets device id in a rule.  # noqa: E501

        :param device_id: The device_id of this AlertResponse.  # noqa: E501
        :type: str
        """
        if device_id is None:
            raise ValueError("Invalid value for `device_id`, must not be `None`")  # noqa: E501

        self._device_id = device_id

    @property
    def device_msg_received(self):
        """Gets the device_msg_received of this AlertResponse.  # noqa: E501

        Gets or sets last message received time.  # noqa: E501

        :return: The device_msg_received of this AlertResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._device_msg_received

    @device_msg_received.setter
    def device_msg_received(self, device_msg_received):
        """Sets the device_msg_received of this AlertResponse.

        Gets or sets last message received time.  # noqa: E501

        :param device_msg_received: The device_msg_received of this AlertResponse.  # noqa: E501
        :type: datetime
        """

        self._device_msg_received = device_msg_received

    @property
    def status(self):
        """Gets the status of this AlertResponse.  # noqa: E501

        Gets or sets a value indicating whether Alert is acknowledged.  # noqa: E501

        :return: The status of this AlertResponse.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AlertResponse.

        Gets or sets a value indicating whether Alert is acknowledged.  # noqa: E501

        :param status: The status of this AlertResponse.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        allowed_values = ["Open", "Acknowledged", "Closed"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AlertResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AlertResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
