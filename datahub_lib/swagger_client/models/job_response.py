# coding: utf-8

"""
    Azure FarmBeats API

    <p>  <p>Azure FarmBeats helps you build digital agricultural solutions in Azure. By providing a standardized schema to query agricultural data from various sources, Azure FarmBeats provides you:  <ul >   <li style=\"margin: 7px;\">Ability to acquire, aggregate, process and store agricultural data.</li>   <li style=\"margin: 7px;\">Capability to fuse data between data sources and generate insights.</li>   <li style=\"margin: 7px;\">Schematized access and query capabilities on ingested data.</li>  </ul>  </p>  <h><b>REST Operation Groups</b></h>  <p><b>Farm:</b></p>  <p>Farm corresponds to a physical location of interest within the system. Each Farm has a Farm name and a unique farm id.</p>  <p><b>Device:</b></p>  <p>Device corresponds to a physical device present in the farm. Each device has a unique device id. Device is typically provisioned to a farm with a farm id.</p>  <p><b>DeviceModel:</b></p>  <p>DeviceModel corresponds to the meta-data of the device such as the Manufacturer, Type of the device either Gateway or Node.</p>  <p><b>Sensor:</b></p>  <p>Sensor corresponds to a physical sensor that records values. A sensor is typically connected to a device with a device id.</p>  </p>  <p><b>SensorModel:</b></p>  <p>SensorModel corresponds to the meta-data of the sensor such as the Manufacturer, Type of the sensor either Analog or Digital, Sensor Measure such as Ambient Temperature, Pressure etc.</p>  <p><b>Telemetry:</b></p>  <p>Telemetry provides the ability to read telemetry messages for a particular sensor & time range.</p>  <p><b>Job:</b></p>  <p>Job corresponds to any workflow of activities which are executed in the system to get a desired output. Each job is associated with a job id and job type.</p>  <p><b>JobType:</b></p>  <p>JobType corresponds to different job types supported by the system. This includes system defined & user-defined job types.</p>  <p><b>ExtendedType:</b></p>  <p>ExtendedType corresponds to the list of system & user-defined types in the system. This helps setup a new Sensor or Scene or Scenefile type in the system.</p>  <p><b>Partner:</b></p>  <p>Partner corresponds to the sensor/weather/imagery integration partner.</p>  <p><b>Scene:</b></p>  <p>Scene corresponds to any generated output in the context of a Farm. Each Scene has a scene id, scene source, scene type and farm id associated with it. Each scene id  can have multiple scene files associated with it.</p>  <p><b>SceneFile:</b></p>  <p>SceneFile corresponds to all files which are generated for single scene. A single scene id can have multiple SceneFile ids associated with it.</p>  <p><b>Rule:</b></p>  <p>Rule corresponds to a condition for farm-related data to trigger an alert. Each rule will be in the context of a farm's data.</p>  <p><b>Alert:</b></p>  <p>Alert corresponds to a notification which gets generated when a rule condition is met. Each alert will be in the context of a rule.</p>  <p><b>RoleDefinition:</b></p>  <p>RoleDefinition defines allowed and disallowed actions for a role.</p>  <p><b>RoleAssignment:</b></p>  <p>RoleAssignment corresponds to the assignment of a role to a user or a service principal.</p>  <p><b>WeatherDataModel:</b></p>  <p>WeatherDataModel corresponds to the metadata of the Weather Station such as name and weather measures such as Precipitation, Rainfall etc.</p>  <p><b>WeatherDataLocation:</b></p>  <p>WeatherDataLocation corresponds to the instance of Weather Station for a particular location (latitude/longitude).</p>  </p>    # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from datahub_lib.swagger_client.configuration import Configuration


class JobResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'created_at': 'datetime',
        'last_modified_at': 'datetime',
        'stop_requested': 'bool',
        'current_state': 'str',
        'error': 'str',
        'status': 'JobStatus',
        'debug_info': 'DebugInformation',
        'info': 'JobInfo',
        'type_id': 'str',
        'arguments': 'dict(str, object)',
        'parent_job_id': 'str',
        'name': 'str',
        'description': 'str',
        'properties': 'dict(str, object)'
    }

    attribute_map = {
        'id': 'id',
        'created_at': 'createdAt',
        'last_modified_at': 'lastModifiedAt',
        'stop_requested': 'stopRequested',
        'current_state': 'currentState',
        'error': 'error',
        'status': 'status',
        'debug_info': 'debugInfo',
        'info': 'info',
        'type_id': 'typeId',
        'arguments': 'arguments',
        'parent_job_id': 'parentJobId',
        'name': 'name',
        'description': 'description',
        'properties': 'properties'
    }

    def __init__(self, id=None, created_at=None, last_modified_at=None, stop_requested=None, current_state=None, error=None, status=None, debug_info=None, info=None, type_id=None, arguments=None, parent_job_id=None, name=None, description=None, properties=None, local_vars_configuration=None):  # noqa: E501
        """JobResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._created_at = None
        self._last_modified_at = None
        self._stop_requested = None
        self._current_state = None
        self._error = None
        self._status = None
        self._debug_info = None
        self._info = None
        self._type_id = None
        self._arguments = None
        self._parent_job_id = None
        self._name = None
        self._description = None
        self._properties = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if created_at is not None:
            self.created_at = created_at
        if last_modified_at is not None:
            self.last_modified_at = last_modified_at
        if stop_requested is not None:
            self.stop_requested = stop_requested
        if current_state is not None:
            self.current_state = current_state
        if error is not None:
            self.error = error
        if status is not None:
            self.status = status
        if debug_info is not None:
            self.debug_info = debug_info
        if info is not None:
            self.info = info
        self.type_id = type_id
        if arguments is not None:
            self.arguments = arguments
        if parent_job_id is not None:
            self.parent_job_id = parent_job_id
        self.name = name
        if description is not None:
            self.description = description
        if properties is not None:
            self.properties = properties

    @property
    def id(self):
        """Gets the id of this JobResponse.  # noqa: E501

        Gets or sets system generated unique id.  # noqa: E501

        :return: The id of this JobResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this JobResponse.

        Gets or sets system generated unique id.  # noqa: E501

        :param id: The id of this JobResponse.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def created_at(self):
        """Gets the created_at of this JobResponse.  # noqa: E501

        Gets or sets job's creation date.  # noqa: E501

        :return: The created_at of this JobResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this JobResponse.

        Gets or sets job's creation date.  # noqa: E501

        :param created_at: The created_at of this JobResponse.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def last_modified_at(self):
        """Gets the last_modified_at of this JobResponse.  # noqa: E501

        Gets or sets job's last modified date.  # noqa: E501

        :return: The last_modified_at of this JobResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._last_modified_at

    @last_modified_at.setter
    def last_modified_at(self, last_modified_at):
        """Sets the last_modified_at of this JobResponse.

        Gets or sets job's last modified date.  # noqa: E501

        :param last_modified_at: The last_modified_at of this JobResponse.  # noqa: E501
        :type: datetime
        """

        self._last_modified_at = last_modified_at

    @property
    def stop_requested(self):
        """Gets the stop_requested of this JobResponse.  # noqa: E501

        Gets or sets a value indicating whether flag indicating stop is requested by user or not.  # noqa: E501

        :return: The stop_requested of this JobResponse.  # noqa: E501
        :rtype: bool
        """
        return self._stop_requested

    @stop_requested.setter
    def stop_requested(self, stop_requested):
        """Sets the stop_requested of this JobResponse.

        Gets or sets a value indicating whether flag indicating stop is requested by user or not.  # noqa: E501

        :param stop_requested: The stop_requested of this JobResponse.  # noqa: E501
        :type: bool
        """

        self._stop_requested = stop_requested

    @property
    def current_state(self):
        """Gets the current_state of this JobResponse.  # noqa: E501

        Gets or sets current state of job.  # noqa: E501

        :return: The current_state of this JobResponse.  # noqa: E501
        :rtype: str
        """
        return self._current_state

    @current_state.setter
    def current_state(self, current_state):
        """Sets the current_state of this JobResponse.

        Gets or sets current state of job.  # noqa: E501

        :param current_state: The current_state of this JobResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["Submitted", "Accepted", "Running", "PendingRetry", "Failed", "Succeeded", "Stopped"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and current_state not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `current_state` ({0}), must be one of {1}"  # noqa: E501
                .format(current_state, allowed_values)
            )

        self._current_state = current_state

    @property
    def error(self):
        """Gets the error of this JobResponse.  # noqa: E501

        Gets or sets error message if any.  <remarks>  This field is going be deprecated in favor of Status which has more detailed information.  </remarks>  # noqa: E501

        :return: The error of this JobResponse.  # noqa: E501
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this JobResponse.

        Gets or sets error message if any.  <remarks>  This field is going be deprecated in favor of Status which has more detailed information.  </remarks>  # noqa: E501

        :param error: The error of this JobResponse.  # noqa: E501
        :type: str
        """

        self._error = error

    @property
    def status(self):
        """Gets the status of this JobResponse.  # noqa: E501


        :return: The status of this JobResponse.  # noqa: E501
        :rtype: JobStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this JobResponse.


        :param status: The status of this JobResponse.  # noqa: E501
        :type: JobStatus
        """

        self._status = status

    @property
    def debug_info(self):
        """Gets the debug_info of this JobResponse.  # noqa: E501


        :return: The debug_info of this JobResponse.  # noqa: E501
        :rtype: DebugInformation
        """
        return self._debug_info

    @debug_info.setter
    def debug_info(self, debug_info):
        """Sets the debug_info of this JobResponse.


        :param debug_info: The debug_info of this JobResponse.  # noqa: E501
        :type: DebugInformation
        """

        self._debug_info = debug_info

    @property
    def info(self):
        """Gets the info of this JobResponse.  # noqa: E501


        :return: The info of this JobResponse.  # noqa: E501
        :rtype: JobInfo
        """
        return self._info

    @info.setter
    def info(self, info):
        """Sets the info of this JobResponse.


        :param info: The info of this JobResponse.  # noqa: E501
        :type: JobInfo
        """

        self._info = info

    @property
    def type_id(self):
        """Gets the type_id of this JobResponse.  # noqa: E501

        Gets or sets Job type id for user-defined or system defined jobs.  <remarks>Refer /JobType APIs for more information.</remarks>  # noqa: E501

        :return: The type_id of this JobResponse.  # noqa: E501
        :rtype: str
        """
        return self._type_id

    @type_id.setter
    def type_id(self, type_id):
        """Sets the type_id of this JobResponse.

        Gets or sets Job type id for user-defined or system defined jobs.  <remarks>Refer /JobType APIs for more information.</remarks>  # noqa: E501

        :param type_id: The type_id of this JobResponse.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and type_id is None:  # noqa: E501
            raise ValueError("Invalid value for `type_id`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                type_id is not None and len(type_id) > 200):
            raise ValueError("Invalid value for `type_id`, length must be less than or equal to `200`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                type_id is not None and len(type_id) < 3):
            raise ValueError("Invalid value for `type_id`, length must be greater than or equal to `3`")  # noqa: E501

        self._type_id = type_id

    @property
    def arguments(self):
        """Gets the arguments of this JobResponse.  # noqa: E501

        Gets or sets job specific arguments specified in the corresponding Job Type.  <remarks>  If arguments are not in the format expected by the Job Type, you get a BAD Request.  These arguments will be passed directly  to the Azure Data Factory Pipeline run.  </remarks>  # noqa: E501

        :return: The arguments of this JobResponse.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._arguments

    @arguments.setter
    def arguments(self, arguments):
        """Sets the arguments of this JobResponse.

        Gets or sets job specific arguments specified in the corresponding Job Type.  <remarks>  If arguments are not in the format expected by the Job Type, you get a BAD Request.  These arguments will be passed directly  to the Azure Data Factory Pipeline run.  </remarks>  # noqa: E501

        :param arguments: The arguments of this JobResponse.  # noqa: E501
        :type: dict(str, object)
        """

        self._arguments = arguments

    @property
    def parent_job_id(self):
        """Gets the parent_job_id of this JobResponse.  # noqa: E501

        Gets or sets specify parent job id for this job.  <remarks>  If there is no parent of a job then it should be set to null.  It is user's responsibility to set correct parent job id for better job tracking and monitoring.  </remarks>  # noqa: E501

        :return: The parent_job_id of this JobResponse.  # noqa: E501
        :rtype: str
        """
        return self._parent_job_id

    @parent_job_id.setter
    def parent_job_id(self, parent_job_id):
        """Sets the parent_job_id of this JobResponse.

        Gets or sets specify parent job id for this job.  <remarks>  If there is no parent of a job then it should be set to null.  It is user's responsibility to set correct parent job id for better job tracking and monitoring.  </remarks>  # noqa: E501

        :param parent_job_id: The parent_job_id of this JobResponse.  # noqa: E501
        :type: str
        """

        self._parent_job_id = parent_job_id

    @property
    def name(self):
        """Gets the name of this JobResponse.  # noqa: E501

        Gets or sets name to identify resource.  # noqa: E501

        :return: The name of this JobResponse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this JobResponse.

        Gets or sets name to identify resource.  # noqa: E501

        :param name: The name of this JobResponse.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) > 100):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `100`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) < 3):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `3`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this JobResponse.  # noqa: E501

        Gets or sets textual description of resource.  # noqa: E501

        :return: The description of this JobResponse.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this JobResponse.

        Gets or sets textual description of resource.  # noqa: E501

        :param description: The description of this JobResponse.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                description is not None and len(description) > 1000):
            raise ValueError("Invalid value for `description`, length must be less than or equal to `1000`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                description is not None and len(description) < 3):
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `3`")  # noqa: E501

        self._description = description

    @property
    def properties(self):
        """Gets the properties of this JobResponse.  # noqa: E501

        Gets or sets additional properties of the resource.  # noqa: E501

        :return: The properties of this JobResponse.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this JobResponse.

        Gets or sets additional properties of the resource.  # noqa: E501

        :param properties: The properties of this JobResponse.  # noqa: E501
        :type: dict(str, object)
        """

        self._properties = properties

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, JobResponse):
            return True

        return self.to_dict() != other.to_dict()
