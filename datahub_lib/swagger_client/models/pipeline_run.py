# coding: utf-8

"""
    Azure FarmBeats API

    <p>  <p>Azure FarmBeats helps you build digital agricultural solutions in Azure. By providing a standardized schema to query agricultural data from various sources, Azure FarmBeats provides you:  <ul >   <li style=\"margin: 7px;\">Ability to acquire, aggregate, process and store agricultural data.</li>   <li style=\"margin: 7px;\">Capability to fuse data between data sources and generate insights.</li>   <li style=\"margin: 7px;\">Schematized access and query capabilities on ingested data.</li>  </ul>  </p>  <h><b>REST Operation Groups</b></h>  <p><b>Farm:</b></p>  <p>Farm corresponds to a physical location of interest within the system. Each Farm has a Farm name and a unique farm id.</p>  <p><b>Device:</b></p>  <p>Device corresponds to a physical device present in the farm. Each device has a unique device id. Device is typically provisioned to a farm with a farm id.</p>  <p><b>DeviceModel:</b></p>  <p>DeviceModel corresponds to the meta-data of the device such as the Manufacturer, Type of the device either Gateway or Node.</p>  <p><b>Sensor:</b></p>  <p>Sensor corresponds to a physical sensor that records values. A sensor is typically connected to a device with a device id.</p>  </p>  <p><b>SensorModel:</b></p>  <p>SensorModel corresponds to the meta-data of the sensor such as the Manufacturer, Type of the sensor either Analog or Digital, Sensor Measure such as Ambient Temperature, Pressure etc.</p>  <p><b>Telemetry:</b></p>  <p>Telemetry provides the ability to read telemetry messages for a particular sensor & time range.</p>  <p><b>Job:</b></p>  <p>Job corresponds to any workflow of activities which are executed in the system to get a desired output. Each job is associated with a job id and job type.</p>  <p><b>JobType:</b></p>  <p>JobType corresponds to different job types supported by the system. This includes system defined & user-defined job types.</p>  <p><b>ExtendedType:</b></p>  <p>ExtendedType corresponds to the list of system & user-defined types in the system. This helps setup a new Sensor or Scene or Scenefile type in the system.</p>  <p><b>Partner:</b></p>  <p>Partner corresponds to the sensor/weather/imagery integration partner.</p>  <p><b>Scene:</b></p>  <p>Scene corresponds to any generated output in the context of a Farm. Each Scene has a scene id, scene source, scene type and farm id associated with it. Each scene id  can have multiple scene files associated with it.</p>  <p><b>SceneFile:</b></p>  <p>SceneFile corresponds to all files which are generated for single scene. A single scene id can have multiple SceneFile ids associated with it.</p>  <p><b>Rule:</b></p>  <p>Rule corresponds to a condition for farm-related data to trigger an alert. Each rule will be in the context of a farm's data.</p>  <p><b>Alert:</b></p>  <p>Alert corresponds to a notification which gets generated when a rule condition is met. Each alert will be in the context of a rule.</p>  <p><b>RoleDefinition:</b></p>  <p>RoleDefinition defines allowed and disallowed actions for a role.</p>  <p><b>RoleAssignment:</b></p>  <p>RoleAssignment corresponds to the assignment of a role to a user or a service principal.</p>  </p>    # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PipelineRun(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'run_id': 'str',
        'pipeline_name': 'str',
        'parameters': 'dict(str, str)',
        'last_updated': 'datetime',
        'run_start': 'datetime',
        'run_end': 'datetime',
        'duration_in_ms': 'int',
        'status': 'str',
        'message': 'str'
    }

    attribute_map = {
        'run_id': 'runId',
        'pipeline_name': 'pipelineName',
        'parameters': 'parameters',
        'last_updated': 'lastUpdated',
        'run_start': 'runStart',
        'run_end': 'runEnd',
        'duration_in_ms': 'durationInMs',
        'status': 'status',
        'message': 'message'
    }

    def __init__(self, run_id=None, pipeline_name=None, parameters=None, last_updated=None, run_start=None, run_end=None, duration_in_ms=None, status=None, message=None):  # noqa: E501
        """PipelineRun - a model defined in Swagger"""  # noqa: E501

        self._run_id = None
        self._pipeline_name = None
        self._parameters = None
        self._last_updated = None
        self._run_start = None
        self._run_end = None
        self._duration_in_ms = None
        self._status = None
        self._message = None
        self.discriminator = None

        if run_id is not None:
            self.run_id = run_id
        if pipeline_name is not None:
            self.pipeline_name = pipeline_name
        if parameters is not None:
            self.parameters = parameters
        if last_updated is not None:
            self.last_updated = last_updated
        if run_start is not None:
            self.run_start = run_start
        if run_end is not None:
            self.run_end = run_end
        if duration_in_ms is not None:
            self.duration_in_ms = duration_in_ms
        if status is not None:
            self.status = status
        if message is not None:
            self.message = message

    @property
    def run_id(self):
        """Gets the run_id of this PipelineRun.  # noqa: E501


        :return: The run_id of this PipelineRun.  # noqa: E501
        :rtype: str
        """
        return self._run_id

    @run_id.setter
    def run_id(self, run_id):
        """Sets the run_id of this PipelineRun.


        :param run_id: The run_id of this PipelineRun.  # noqa: E501
        :type: str
        """

        self._run_id = run_id

    @property
    def pipeline_name(self):
        """Gets the pipeline_name of this PipelineRun.  # noqa: E501


        :return: The pipeline_name of this PipelineRun.  # noqa: E501
        :rtype: str
        """
        return self._pipeline_name

    @pipeline_name.setter
    def pipeline_name(self, pipeline_name):
        """Sets the pipeline_name of this PipelineRun.


        :param pipeline_name: The pipeline_name of this PipelineRun.  # noqa: E501
        :type: str
        """

        self._pipeline_name = pipeline_name

    @property
    def parameters(self):
        """Gets the parameters of this PipelineRun.  # noqa: E501


        :return: The parameters of this PipelineRun.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this PipelineRun.


        :param parameters: The parameters of this PipelineRun.  # noqa: E501
        :type: dict(str, str)
        """

        self._parameters = parameters

    @property
    def last_updated(self):
        """Gets the last_updated of this PipelineRun.  # noqa: E501


        :return: The last_updated of this PipelineRun.  # noqa: E501
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this PipelineRun.


        :param last_updated: The last_updated of this PipelineRun.  # noqa: E501
        :type: datetime
        """

        self._last_updated = last_updated

    @property
    def run_start(self):
        """Gets the run_start of this PipelineRun.  # noqa: E501


        :return: The run_start of this PipelineRun.  # noqa: E501
        :rtype: datetime
        """
        return self._run_start

    @run_start.setter
    def run_start(self, run_start):
        """Sets the run_start of this PipelineRun.


        :param run_start: The run_start of this PipelineRun.  # noqa: E501
        :type: datetime
        """

        self._run_start = run_start

    @property
    def run_end(self):
        """Gets the run_end of this PipelineRun.  # noqa: E501


        :return: The run_end of this PipelineRun.  # noqa: E501
        :rtype: datetime
        """
        return self._run_end

    @run_end.setter
    def run_end(self, run_end):
        """Sets the run_end of this PipelineRun.


        :param run_end: The run_end of this PipelineRun.  # noqa: E501
        :type: datetime
        """

        self._run_end = run_end

    @property
    def duration_in_ms(self):
        """Gets the duration_in_ms of this PipelineRun.  # noqa: E501


        :return: The duration_in_ms of this PipelineRun.  # noqa: E501
        :rtype: int
        """
        return self._duration_in_ms

    @duration_in_ms.setter
    def duration_in_ms(self, duration_in_ms):
        """Sets the duration_in_ms of this PipelineRun.


        :param duration_in_ms: The duration_in_ms of this PipelineRun.  # noqa: E501
        :type: int
        """

        self._duration_in_ms = duration_in_ms

    @property
    def status(self):
        """Gets the status of this PipelineRun.  # noqa: E501


        :return: The status of this PipelineRun.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this PipelineRun.


        :param status: The status of this PipelineRun.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def message(self):
        """Gets the message of this PipelineRun.  # noqa: E501


        :return: The message of this PipelineRun.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this PipelineRun.


        :param message: The message of this PipelineRun.  # noqa: E501
        :type: str
        """

        self._message = message

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PipelineRun, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PipelineRun):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
